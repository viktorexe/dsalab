LAB 1 AND 2 VIVA QUESTIONS AND ANSWERS

=== LAB 1: 1-D ARRAY OPERATIONS ===

Q1. What is an array and what are its characteristics?
A1. An array is a collection of elements of the same data type stored in contiguous memory locations. Characteristics:
- Fixed size (static)
- Same data type elements
- Random access using index
- Zero-based indexing in C

Q2. What are the advantages and disadvantages of arrays?
A2. Advantages: Fast access O(1), simple implementation, cache friendly
    Disadvantages: Fixed size, insertion/deletion is costly O(n), memory waste if not fully used

Q3. How are elements accessed in an array?
A3. Elements are accessed using index: arr[index]. The address is calculated as: base_address + (index * size_of_datatype)

Q4. What is the time complexity of insertion in an array?
A4. Best case: O(1) - insertion at end
    Average case: O(n) - insertion at middle
    Worst case: O(n) - insertion at beginning (shift all elements)

Q5. What is the time complexity of deletion in an array?
A5. Best case: O(1) - deletion from end
    Average case: O(n) - deletion from middle
    Worst case: O(n) - deletion from beginning (shift all elements)

Q6. Can we change the size of an array after declaration?
A6. No, in C arrays have fixed size. We cannot increase or decrease the size after declaration. We need dynamic memory allocation for variable size.

Q7. How does memory allocation work for arrays?
A7. Arrays are allocated in contiguous memory blocks. For int arr[5], if base address is 1000 and int size is 4 bytes:
    arr[0] = 1000, arr[1] = 1004, arr[2] = 1008, etc.

Q8. What is array traversal and its time complexity?
A8. Traversal means visiting each element of array once. Time complexity is O(n) where n is number of elements.

Q9. What happens when we access array out of bounds?
A9. C doesn't check bounds, so it may access garbage values or cause segmentation fault. It's undefined behavior.

Q10. What is the difference between array size and array length?
A10. Size: Total memory allocated (size * sizeof(datatype))
     Length: Number of elements currently stored (may be less than capacity)

=== LAB 2: 2-D ARRAY OPERATIONS ===

Q11. What is a two-dimensional array?
A11. A 2-D array is an array of arrays, representing data in rows and columns format like a matrix. Syntax: datatype arr[rows][cols];

Q12. How is a 2-D array stored in memory?
A12. 2-D arrays are stored in row-major order in C. For arr[3][4]:
     Row 0: arr[0][0], arr[0][1], arr[0][2], arr[0][3]
     Row 1: arr[1][0], arr[1][1], arr[1][2], arr[1][3]
     Row 2: arr[2][0], arr[2][1], arr[2][2], arr[2][3]

Q13. What are the applications of 2-D arrays?
A13. - Matrix operations (addition, multiplication)
     - Image processing (pixels)
     - Game boards (chess, tic-tac-toe)
     - Tables and spreadsheets
     - Graph adjacency matrices

Q14. Can matrix addition be done for matrices of different sizes?
A14. No, matrix addition requires both matrices to have the same dimensions (same number of rows and columns).

Q15. How do you access elements in a 2-D array?
A15. Using two indices: arr[row][col]. Address calculation: base + (row * cols + col) * sizeof(datatype)

Q16. What is the time complexity of matrix addition?
A16. O(m * n) where m is number of rows and n is number of columns, as we need to visit each element once.

Q17. How much memory does a 2-D array consume?
A17. Memory = rows * columns * sizeof(datatype). For int arr[3][4]: 3 * 4 * 4 = 48 bytes.

Q18. What is the difference between 2-D array and array of pointers?
A18. 2-D array: Contiguous memory, fixed size, arr[i][j] syntax
     Array of pointers: Non-contiguous, dynamic size possible, *(*(arr+i)+j) syntax

Q19. Can we initialize a 2-D array partially?
A19. Yes, uninitialized elements are set to 0. Example: int arr[2][3] = {{1,2}, {3}}; gives {{1,2,0}, {3,0,0}}

Q20. How do you pass a 2-D array to a function?
A20. Must specify column size: void func(int arr[][COLS], int rows) or void func(int arr[ROWS][COLS])

Q21. What are jagged arrays?
A21. Arrays where each row can have different number of columns. Not directly supported in C, but can be implemented using array of pointers.

Q22. How do you find transpose of a matrix?
A22. Swap rows and columns: transpose[j][i] = original[i][j]. Time complexity: O(m*n)

Q23. What is the space complexity of matrix operations?
A23. Matrix addition: O(1) if result stored in existing matrix, O(m*n) if new matrix created
     Matrix multiplication: O(m*n) for result matrix

Q24. How do you check if two matrices can be multiplied?
A24. Matrix A(m×n) can be multiplied with Matrix B(p×q) only if n = p. Result will be m×q matrix.

Q25. What is the difference between static and dynamic 2-D arrays?
A25. Static: Fixed size at compile time, stack allocation, automatic cleanup
     Dynamic: Variable size at runtime, heap allocation, manual cleanup required

PRACTICAL TIPS:
- Always check array bounds before access
- Initialize arrays to avoid garbage values
- Use meaningful variable names for indices (i for rows, j for columns)
- Remember row-major storage order for memory calculations
- Practice matrix operations step by step
- Understand the difference between array size and number of elements stored